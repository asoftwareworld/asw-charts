{"version":3,"file":"asoftwareworld-charts-core.umd.js","sources":["../../app/component/core/enum/currency-code.enum.ts","../../app/component/core/enum/grid-options.enum.ts","../../app/component/core/enum/legend-type.enum.ts","../../app/component/core/pipe/invalid-pipe-argument-error.ts","../../app/component/core/pipe/currency-pipe.ts","../../app/component/core/constant/chart-constants.ts","../../app/component/core/public_api.ts","../../app/component/core/asoftwareworld-charts-core.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright ASW (A Software World) All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file\r\n */\r\n export enum CurrencyCodeEnum {\r\n    ALL = 'Lek',\r\n    AFN = '؋',\r\n    ARS = '$',\r\n    AWG = 'ƒ',\r\n    AUD = '$',\r\n    AZN = '₼',\r\n    BSD = '$',\r\n    INR = 'INR',\r\n    USD = 'USD',\r\n    EUR = 'EUR',\r\n    JPY = 'JPY',\r\n    Test = 'PKR'\r\n}\r\n","/**\r\n * @license\r\n * Copyright ASW (A Software World) All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file\r\n */\r\n export enum GridOptionsEnum {\r\n    ExtraSmall = 'xs',\r\n    Small = 'sm',\r\n    Medium = 'md',\r\n    Large = 'lg',\r\n    ExtraLarge = 'xl',\r\n    ExtraExtraLarge = 'xxl'\r\n}\r\n","/**\r\n * @license\r\n * Copyright ASW (A Software World) All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file\r\n */\r\nexport enum LegendTypeEnum {\r\n    Default = 'default',\r\n    Percentage = 'percentage',\r\n    Value = 'value',\r\n    Both = 'both'\r\n}\r\n\r\nexport enum LegendLayoutEnum {\r\n    Vertical = 'vertical',\r\n    Horizontal = 'horizontal',\r\n    Proximate = 'proximate'\r\n}\r\n\r\nexport enum LegendPositionEnum {\r\n    Left = 'left',\r\n    Right = 'right',\r\n    Bottom = 'bottom'\r\n}\r\n","/**\r\n * @license\r\n * Copyright ASW (A Software World) All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file\r\n */\r\n\r\nimport { Type, ɵstringify as stringify } from '@angular/core';\r\n\r\nexport function invalidPipeArgumentError(type: Type<any>, value: any): any {\r\n    return Error(`InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`);\r\n}\r\n","/**\r\n * @license\r\n * Copyright ASW (A Software World) All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file\r\n */\r\n\r\nimport { DEFAULT_CURRENCY_CODE, Inject, LOCALE_ID, Pipe, PipeTransform } from '@angular/core';\r\nimport { formatCurrency, getCurrencySymbol } from '@angular/common';\r\nimport { invalidPipeArgumentError } from './invalid-pipe-argument-error';\r\n@Pipe({\r\n    name: 'aswCurrencyPipe',\r\n})\r\nexport class AswCurrencyPipe implements PipeTransform {\r\n    constructor(\r\n        @Inject(LOCALE_ID) private locale: string,\r\n        @Inject(DEFAULT_CURRENCY_CODE) private defaultCurrencyCode: string = 'USD') { }\r\n\r\n    transform(\r\n        value: number | string | null | undefined, currencyCode?: string,\r\n        display?: 'code' | 'symbol' | 'symbol-narrow' | string | boolean, digitsInfo?: string,\r\n        locale?: string): string | null;\r\n\r\n    transform(\r\n        value: number | string | null | undefined, currencyCode: string = this.defaultCurrencyCode,\r\n        display: 'code' | 'symbol' | 'symbol-narrow' | string | boolean = 'symbol', digitsInfo?: string,\r\n        locale?: string): string | null {\r\n        if (!isValue(value)) { return null; }\r\n\r\n        locale = locale || this.locale;\r\n\r\n        if (typeof display === 'boolean') {\r\n            display = display ? 'symbol' : 'code';\r\n        }\r\n\r\n        let currency: string = currencyCode || this.defaultCurrencyCode;\r\n        if (display !== 'code') {\r\n            if (display === 'symbol' || display === 'symbol-narrow') {\r\n                currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);\r\n            } else {\r\n                currency = display;\r\n            }\r\n        }\r\n\r\n        try {\r\n            const num = strToNumber(value);\r\n            const formattedCurrency = formatCurrency(num, locale, currency, currencyCode, digitsInfo);\r\n            console.log(formattedCurrency);\r\n            return formattedCurrency;\r\n        } catch (error: any) {\r\n            throw invalidPipeArgumentError(AswCurrencyPipe, error.message);\r\n        }\r\n    }\r\n}\r\n\r\nfunction isValue(value: number | string | null | undefined): value is number | string {\r\n    return !(value == null || value === '' || value !== value);\r\n}\r\n\r\n/**\r\n * Transforms a string into a number (if needed).\r\n */\r\nfunction strToNumber(value: number | string): number {\r\n    // Convert strings to numbers\r\n    if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {\r\n        return Number(value);\r\n    }\r\n    if (typeof value !== 'number') {\r\n        throw new Error(`${value} is not a number`);\r\n    }\r\n    return value;\r\n}\r\n\r\n\r\n// transform(value: any, args?: any): any {\r\n    //     return value.charAt(0) === '-' ?\r\n    //        '(' + value.substring(1, value.length) + ')' :\r\n    //        value;\r\n    // }\r\n    // transform(value: number | null | undefined): any {\r\n    //     if (value === null) { return null; }\r\n    //     if (isNaN(Number(value))) { return null; } // will only work value is a number\r\n    //     if (value === 0) { return null; }\r\n    //     let abs = Math.abs(Number(value));\r\n    //     const rounder = Math.pow(10, 1);\r\n    //     const isNegative = Number(value) < 0; // will also work for Negetive numbers\r\n    //     let key = '';\r\n\r\n    //     const powers = [\r\n    //         { key: 'Q', value: Math.pow(10, 15) },\r\n    //         { key: 'T', value: Math.pow(10, 12) },\r\n    //         { key: 'B', value: Math.pow(10, 9) },\r\n    //         { key: 'M', value: Math.pow(10, 6) },\r\n    //         { key: 'K', value: 1000 }\r\n    //     ];\r\n\r\n    //     powers.forEach(power => {\r\n    //         let reduced = abs / power.value;\r\n    //         reduced = Math.round(reduced * rounder) / rounder;\r\n    //         if (reduced >= 1) {\r\n    //             abs = reduced;\r\n    //             key = power.key;\r\n    //             return;\r\n    //         }\r\n    //     });\r\n\r\n    //     // for (let i = 0; i < powers.length; i++) {\r\n    //     //     let reduced = abs / powers[i].value;\r\n    //     //     reduced = Math.round(reduced * rounder) / rounder;\r\n    //     //     if (reduced >= 1) {\r\n    //     //         abs = reduced;\r\n    //     //         key = powers[i].key;\r\n    //     //         break;\r\n    //     //     }\r\n    //     // }\r\n    //     return (isNegative ? '(' + abs + ')' : abs) + key;\r\n    // }\r\n","/**\r\n * @license\r\n * Copyright ASW (A Software World) All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file\r\n */\r\nexport class AswChartConstants {\r\n    public static readonly whiteColor: string = '#ffffff';\r\n    public static readonly blackColor: string = '#000000';\r\n    public static readonly fontWeight: string = 'normal';\r\n    public static readonly fontSize12: string = '12px';\r\n    public static readonly fontSize14: string = '14px';\r\n    public static readonly fontSize16: string = '16px';\r\n    public static readonly innerSize: string = '75%';\r\n    public static readonly pointer: string = 'pointer';\r\n    public static readonly centerAlign: string = 'center';\r\n}\r\n","/**\r\n * @license\r\n * Copyright ASW (A Software World) All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file\r\n */\r\n\r\nexport * from './enum/currency-code.enum';\r\nexport * from './enum/grid-options.enum';\r\nexport * from './enum/legend-type.enum';\r\nexport * from './interface/point-click-event';\r\nexport * from './pipe/currency-pipe';\r\nexport * from './constant/chart-constants';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["CurrencyCodeEnum","GridOptionsEnum","LegendTypeEnum","LegendLayoutEnum","LegendPositionEnum","stringify","getCurrencySymbol","formatCurrency","Pipe","Inject","LOCALE_ID","DEFAULT_CURRENCY_CODE"],"mappings":"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"}